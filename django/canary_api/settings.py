"""
Django settings for canaryAPI project.

Generated by 'django-admin startproject' using Django 2.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""

import os
from sys import argv
from dotenv import load_dotenv
from tempfile import gettempdir

load_dotenv()
# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

DJANGO_SERVER_TYPE = os.environ.get('DJANGO_SERVER_TYPE')

if DJANGO_SERVER_TYPE == 'prod':
    MEDIA_ROOT = '/opt/django/media'

elif DJANGO_SERVER_TYPE == 'test' or 'test' in argv:
    MEDIA_ROOT = f"{gettempdir()}/media"

else:
    MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

SAMPLE_ROOT = os.path.join(MEDIA_ROOT, 'samples')

MEDIA_URL = '/media/'
TEMPLATE_DIR = 'canary_utils/canary_templates'


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!

# needs to 32 bytes and URL safe for crypto operations
# use the 'generatesecret' command in `manage.py` to generate one
SECRET_KEY = os.environ.get('SECRET_KEY')


AUTH_USER_MODEL = 'manage_api.User'

FIXTURE_DIRS = (
        os.path.join(BASE_DIR, 'fixtures'),
)

if DJANGO_SERVER_TYPE == 'prod':
    LOGGING = {
        'version': 1,
        'disable_existing_loggers': False,
        'filters': {
            'require_debug_false': {
                '()': 'django.utils.log.RequireDebugFalse'
            }
        },
        'handlers': {
            'applogfile': {
            'level':'INFO',
            'class':'logging.handlers.RotatingFileHandler',
            'filename': os.path.join('/var/log/django', 'django.log'),
            'maxBytes': 1024*1024*15, # 15MB
            'backupCount': 10,
            }
        },
        'loggers': {
            'django.request': {
                'handlers': ['applogfile'],
                'level': 'ERROR',
                'propagate': True,
            },
        }
    }


# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True if os.environ['DJANGO_SERVER_TYPE'] != 'prod' else False


ALLOWED_HOSTS = [os.environ.get('ALLOWED_HOSTS'),]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'rest_framework',
    'rest_framework.authtoken',
    'django_rq',
    'scheduler',
    'django.contrib.staticfiles',
    'alert_api',
    'manage_api',
    'canary_files',
    'canary_utils',
    'canary_log_api',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]


REST_FRAMEWORK = {
    'DEFAULT_PARSER_CLASSES': (
        'rest_framework.parsers.JSONParser',
        'rest_framework.parsers.FileUploadParser',
    ),
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    )
}


ROOT_URLCONF = 'canary_api.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'canary_api.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases
if os.environ.get('DJANGO_SERVER_TYPE') == 'debug':
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
        }
    }
elif os.environ.get('DJANGO_SERVER_TYPE') == 'test':
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': os.path.join(os.path.dirname(__file__), 'test.db'),
            #'TEST_NAME': os.path.join(os.path.dirname(__file__), 'test.db'),
        }
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.mysql',
            'NAME': 'rest_framework',
            'USER': os.getenv('MYSQL_USER'),
            'PASSWORD': os.getenv('MYSQL_PASSWORD'),
            'HOST': 'localhost',
            'PORT': '3306',
         'OPTIONS': {
            'init_command': "SET sql_mode='STRICT_TRANS_TABLES'"
            },

        }
    }

RQ_QUEUES = {
'default': {
    'HOST': 'localhost',
    'PORT': 6379,
    'DB': 0,
    'PASSWORD': os.getenv('REDIS_PASSWORD'),
    'DEFAULT_TIMEOUT': 360,
}}

# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = 'en-us'
DATETIME_FORMAT = 'r'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = False

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/
STATIC_URL = '/static/'
STATIC_ROOT = '/var/www/html/static'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static"),
]


# the parsers that will be running
parsers = [['smb'], ['nginx'], ['dns']]

PIPE = '/var/run/canary'
server_log = '/var/log/django/log_daemon.log'

log = {'nginx':   '/var/log/syslog-ng/nginx',
       'smb':      '/var/log/syslog-ng/smb',
       'dns':      '/var/log/syslog-ng/querylog'}
