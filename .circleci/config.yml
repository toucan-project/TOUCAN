# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
      - image: circleci/python:3.7.4

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            apt-get install -y python3-pip sqlite mupdf-tools default-libmysqlclient-dev libffi-dev python3-crypto- python3-cryptography libfuzzy-dev redis
            /etc/init.d/redis-server start
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements.txt

      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}

      # run tests!
      # this example uses Django's built-in test-runner
      # other common Python testing frameworks include pytest and nose
      # https://pytest.org
      # https://nose.readthedocs.io
      - run:
          name: run tests
          command: |
            . venv/bin/activate
            # yes this is a test key
            export DJANGO_SERVER_TYPE=test; cd django
            export SECRET_KEY=w1bCQaHD537HMvDXv9QxAfdJbEOdBc4RkOOkTsOwDI4=
            coverage run ./manage.py test
            coverage report --rcfile=.coveragerc_critical --fail-under=100
            coverage report --fail-under=87 -m --skip-covered
            bandit -r .
            safety check

      - store_artifacts:
          path: test-reports
          destination: test-reports
